// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `plt_device_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.juzix.plt.slice.device;

/**
 * 设备服务
 **/
public abstract class _PltDeviceServiceDisp extends Ice.ObjectImpl implements PltDeviceService
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::device::PltDeviceService"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 增量删除设备会话信息
     * @param __cb The callback object for the operation.
     * @param deviceId 设备id
     **/
    public final void deleteSelective_async(AMD_PltDeviceService_deleteSelective __cb, String deviceId, String[] fields)
        throws com.juzix.plt.slice.common.PltException
    {
        deleteSelective_async(__cb, deviceId, fields, null);
    }

    /**
     * 查询设备会话信息
     * @param __cb The callback object for the operation.
     * @param deviceId 设备id
     **/
    public final void queryDeviceInfo_async(AMD_PltDeviceService_queryDeviceInfo __cb, String deviceId)
        throws com.juzix.plt.slice.common.PltException
    {
        queryDeviceInfo_async(__cb, deviceId, null);
    }

    /**
     * 批量查询设备会话信息
     * @param __cb The callback object for the operation.
     * @param deviceIds 设备id列表
     **/
    public final void queryDeviceInfoBatch_async(AMD_PltDeviceService_queryDeviceInfoBatch __cb, String[] deviceIds)
        throws com.juzix.plt.slice.common.PltException
    {
        queryDeviceInfoBatch_async(__cb, deviceIds, null);
    }

    /**
     * 设备注册
     * @param __cb The callback object for the operation.
     * @param osType 设备类型。  ISO|ANDROID
     * @param apns token
     **/
    public final void register_async(AMD_PltDeviceService_register __cb, String osType, String deviceIdentifier, String apns)
        throws com.juzix.plt.slice.common.PltException
    {
        register_async(__cb, osType, deviceIdentifier, apns, null);
    }

    /**
     * 更新设备会话信息，当属性存在时采用增量更新(客户端)
     * @param __cb The callback object for the operation.
     * @param deviceId 设备id
     **/
    public final void updateSelective_async(AMD_PltDeviceService_updateSelective __cb, String deviceId, PltDeviceInfo deviceInfo)
        throws com.juzix.plt.slice.common.PltException
    {
        updateSelective_async(__cb, deviceId, deviceInfo, null);
    }

    public static Ice.DispatchStatus ___register(PltDeviceService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String osType;
        String deviceIdentifier;
        String apns;
        osType = __is.readString();
        deviceIdentifier = __is.readString();
        apns = __is.readString();
        __inS.endReadParams();
        _AMD_PltDeviceService_register __cb = new _AMD_PltDeviceService_register(__inS);
        try
        {
            __obj.register_async(__cb, osType, deviceIdentifier, apns, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___updateSelective(PltDeviceService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String deviceId;
        PltDeviceInfo deviceInfo = null;
        deviceId = __is.readString();
        deviceInfo = PltDeviceInfo.__read(__is, deviceInfo);
        __inS.endReadParams();
        _AMD_PltDeviceService_updateSelective __cb = new _AMD_PltDeviceService_updateSelective(__inS);
        try
        {
            __obj.updateSelective_async(__cb, deviceId, deviceInfo, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___deleteSelective(PltDeviceService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String deviceId;
        String[] fields;
        deviceId = __is.readString();
        fields = com.juzix.plt.slice.common.StringListHelper.read(__is);
        __inS.endReadParams();
        _AMD_PltDeviceService_deleteSelective __cb = new _AMD_PltDeviceService_deleteSelective(__inS);
        try
        {
            __obj.deleteSelective_async(__cb, deviceId, fields, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___queryDeviceInfo(PltDeviceService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String deviceId;
        deviceId = __is.readString();
        __inS.endReadParams();
        _AMD_PltDeviceService_queryDeviceInfo __cb = new _AMD_PltDeviceService_queryDeviceInfo(__inS);
        try
        {
            __obj.queryDeviceInfo_async(__cb, deviceId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___queryDeviceInfoBatch(PltDeviceService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String[] deviceIds;
        deviceIds = com.juzix.plt.slice.common.StringListHelper.read(__is);
        __inS.endReadParams();
        _AMD_PltDeviceService_queryDeviceInfoBatch __cb = new _AMD_PltDeviceService_queryDeviceInfoBatch(__inS);
        try
        {
            __obj.queryDeviceInfoBatch_async(__cb, deviceIds, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "deleteSelective",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "queryDeviceInfo",
        "queryDeviceInfoBatch",
        "register",
        "updateSelective"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___deleteSelective(this, in, __current);
            }
            case 1:
            {
                return ___ice_id(this, in, __current);
            }
            case 2:
            {
                return ___ice_ids(this, in, __current);
            }
            case 3:
            {
                return ___ice_isA(this, in, __current);
            }
            case 4:
            {
                return ___ice_ping(this, in, __current);
            }
            case 5:
            {
                return ___queryDeviceInfo(this, in, __current);
            }
            case 6:
            {
                return ___queryDeviceInfoBatch(this, in, __current);
            }
            case 7:
            {
                return ___register(this, in, __current);
            }
            case 8:
            {
                return ___updateSelective(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
