// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `plt_user_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.juzix.plt.slice.user;

/**
 * Provides type-specific helper functions.
 **/
public final class PltUserServicePrxHelper extends Ice.ObjectPrxHelperBase implements PltUserServicePrx
{
    private static final String __idleBegin_name = "idleBegin";

    public void idleBegin(String userId, String token)
        throws com.juzix.plt.slice.common.PltException
    {
        idleBegin(userId, token, null, false);
    }

    public void idleBegin(String userId, String token, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        idleBegin(userId, token, __ctx, true);
    }

    private void idleBegin(String userId, String token, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__idleBegin_name);
        end_idleBegin(begin_idleBegin(userId, token, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_idleBegin(String userId, String token)
    {
        return begin_idleBegin(userId, token, null, false, false, null);
    }

    public Ice.AsyncResult begin_idleBegin(String userId, String token, java.util.Map<String, String> __ctx)
    {
        return begin_idleBegin(userId, token, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_idleBegin(String userId, String token, Ice.Callback __cb)
    {
        return begin_idleBegin(userId, token, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_idleBegin(String userId, String token, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_idleBegin(userId, token, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_idleBegin(String userId, String token, Callback_PltUserService_idleBegin __cb)
    {
        return begin_idleBegin(userId, token, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_idleBegin(String userId, String token, java.util.Map<String, String> __ctx, Callback_PltUserService_idleBegin __cb)
    {
        return begin_idleBegin(userId, token, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_idleBegin(String userId, 
                                           String token, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_idleBegin(userId, token, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_idleBegin(String userId, 
                                           String token, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_idleBegin(userId, token, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_idleBegin(String userId, 
                                           String token, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_idleBegin(userId, token, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_idleBegin(String userId, 
                                           String token, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_VoidCallback __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_idleBegin(userId, token, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_idleBegin(String userId, 
                                            String token, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_VoidCallback __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_idleBegin(userId, token, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           PltUserServicePrxHelper.__idleBegin_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_idleBegin(String userId, 
                                            String token, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__idleBegin_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__idleBegin_name, __cb);
        try
        {
            __result.prepare(__idleBegin_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(userId);
            __os.writeString(token);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_idleBegin(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __idleBegin_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __idleBegin_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.user.PltUserServicePrx __proxy = (com.juzix.plt.slice.user.PltUserServicePrx)__result.getProxy();
        try
        {
            __proxy.end_idleBegin(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __idleEnd_name = "idleEnd";

    public void idleEnd(String userId, String token, String idleSet)
        throws com.juzix.plt.slice.common.PltException
    {
        idleEnd(userId, token, idleSet, null, false);
    }

    public void idleEnd(String userId, String token, String idleSet, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        idleEnd(userId, token, idleSet, __ctx, true);
    }

    private void idleEnd(String userId, String token, String idleSet, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__idleEnd_name);
        end_idleEnd(begin_idleEnd(userId, token, idleSet, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_idleEnd(String userId, String token, String idleSet)
    {
        return begin_idleEnd(userId, token, idleSet, null, false, false, null);
    }

    public Ice.AsyncResult begin_idleEnd(String userId, String token, String idleSet, java.util.Map<String, String> __ctx)
    {
        return begin_idleEnd(userId, token, idleSet, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_idleEnd(String userId, String token, String idleSet, Ice.Callback __cb)
    {
        return begin_idleEnd(userId, token, idleSet, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_idleEnd(String userId, String token, String idleSet, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_idleEnd(userId, token, idleSet, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_idleEnd(String userId, String token, String idleSet, Callback_PltUserService_idleEnd __cb)
    {
        return begin_idleEnd(userId, token, idleSet, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_idleEnd(String userId, String token, String idleSet, java.util.Map<String, String> __ctx, Callback_PltUserService_idleEnd __cb)
    {
        return begin_idleEnd(userId, token, idleSet, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_idleEnd(String userId, 
                                         String token, 
                                         String idleSet, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_idleEnd(userId, token, idleSet, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_idleEnd(String userId, 
                                         String token, 
                                         String idleSet, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_idleEnd(userId, token, idleSet, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_idleEnd(String userId, 
                                         String token, 
                                         String idleSet, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_idleEnd(userId, token, idleSet, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_idleEnd(String userId, 
                                         String token, 
                                         String idleSet, 
                                         java.util.Map<String, String> __ctx, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_idleEnd(userId, token, idleSet, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_idleEnd(String userId, 
                                          String token, 
                                          String idleSet, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.Functional_VoidCallback __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_idleEnd(userId, token, idleSet, __ctx, __explicitCtx, __synchronous, 
                             new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                 {
                                     public final void __completed(Ice.AsyncResult __result)
                                     {
                                         PltUserServicePrxHelper.__idleEnd_completed(this, __result);
                                     }
                                 });
    }

    private Ice.AsyncResult begin_idleEnd(String userId, 
                                          String token, 
                                          String idleSet, 
                                          java.util.Map<String, String> __ctx, 
                                          boolean __explicitCtx, 
                                          boolean __synchronous, 
                                          IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__idleEnd_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__idleEnd_name, __cb);
        try
        {
            __result.prepare(__idleEnd_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(userId);
            __os.writeString(token);
            __os.writeString(idleSet);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_idleEnd(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __idleEnd_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __idleEnd_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.user.PltUserServicePrx __proxy = (com.juzix.plt.slice.user.PltUserServicePrx)__result.getProxy();
        try
        {
            __proxy.end_idleEnd(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __login_name = "login";

    public PltLoginResp login(String deviceId, String data)
        throws com.juzix.plt.slice.common.PltException
    {
        return login(deviceId, data, null, false);
    }

    public PltLoginResp login(String deviceId, String data, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return login(deviceId, data, __ctx, true);
    }

    private PltLoginResp login(String deviceId, String data, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__login_name);
        return end_login(begin_login(deviceId, data, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_login(String deviceId, String data)
    {
        return begin_login(deviceId, data, null, false, false, null);
    }

    public Ice.AsyncResult begin_login(String deviceId, String data, java.util.Map<String, String> __ctx)
    {
        return begin_login(deviceId, data, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_login(String deviceId, String data, Ice.Callback __cb)
    {
        return begin_login(deviceId, data, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(String deviceId, String data, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_login(deviceId, data, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(String deviceId, String data, Callback_PltUserService_login __cb)
    {
        return begin_login(deviceId, data, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_login(String deviceId, String data, java.util.Map<String, String> __ctx, Callback_PltUserService_login __cb)
    {
        return begin_login(deviceId, data, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_login(String deviceId, 
                                       String data, 
                                       IceInternal.Functional_GenericCallback1<PltLoginResp> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(deviceId, data, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(String deviceId, 
                                       String data, 
                                       IceInternal.Functional_GenericCallback1<PltLoginResp> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(deviceId, data, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_login(String deviceId, 
                                       String data, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_GenericCallback1<PltLoginResp> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_login(deviceId, data, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_login(String deviceId, 
                                       String data, 
                                       java.util.Map<String, String> __ctx, 
                                       IceInternal.Functional_GenericCallback1<PltLoginResp> __responseCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(deviceId, data, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_login(String deviceId, 
                                        String data, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.Functional_GenericCallback1<PltLoginResp> __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_login(deviceId, data, __ctx, __explicitCtx, __synchronous, 
                           new IceInternal.Functional_TwowayCallbackArg1UE<com.juzix.plt.slice.user.PltLoginResp>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                               {
                                   public final void __completed(Ice.AsyncResult __result)
                                   {
                                       PltUserServicePrxHelper.__login_completed(this, __result);
                                   }
                               });
    }

    private Ice.AsyncResult begin_login(String deviceId, 
                                        String data, 
                                        java.util.Map<String, String> __ctx, 
                                        boolean __explicitCtx, 
                                        boolean __synchronous, 
                                        IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__login_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__login_name, __cb);
        try
        {
            __result.prepare(__login_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceId);
            __os.writeString(data);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public PltLoginResp end_login(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __login_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            PltLoginResp __ret = null;
            __ret = PltLoginResp.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __login_completed(Ice.TwowayCallbackArg1UE<PltLoginResp> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.user.PltUserServicePrx __proxy = (com.juzix.plt.slice.user.PltUserServicePrx)__result.getProxy();
        PltLoginResp __ret = null;
        try
        {
            __ret = __proxy.end_login(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __logout_name = "logout";

    public void logout(String userId, String token)
        throws com.juzix.plt.slice.common.PltException
    {
        logout(userId, token, null, false);
    }

    public void logout(String userId, String token, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        logout(userId, token, __ctx, true);
    }

    private void logout(String userId, String token, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__logout_name);
        end_logout(begin_logout(userId, token, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_logout(String userId, String token)
    {
        return begin_logout(userId, token, null, false, false, null);
    }

    public Ice.AsyncResult begin_logout(String userId, String token, java.util.Map<String, String> __ctx)
    {
        return begin_logout(userId, token, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_logout(String userId, String token, Ice.Callback __cb)
    {
        return begin_logout(userId, token, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String userId, String token, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_logout(userId, token, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String userId, String token, Callback_PltUserService_logout __cb)
    {
        return begin_logout(userId, token, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String userId, String token, java.util.Map<String, String> __ctx, Callback_PltUserService_logout __cb)
    {
        return begin_logout(userId, token, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_logout(String userId, 
                                        String token, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_logout(userId, token, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_logout(String userId, 
                                        String token, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logout(userId, token, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_logout(String userId, 
                                        String token, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_logout(userId, token, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_logout(String userId, 
                                        String token, 
                                        java.util.Map<String, String> __ctx, 
                                        IceInternal.Functional_VoidCallback __responseCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                        IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                        IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logout(userId, token, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_logout(String userId, 
                                         String token, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.Functional_VoidCallback __responseCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                         IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                         IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_logout(userId, token, __ctx, __explicitCtx, __synchronous, 
                            new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                {
                                    public final void __completed(Ice.AsyncResult __result)
                                    {
                                        PltUserServicePrxHelper.__logout_completed(this, __result);
                                    }
                                });
    }

    private Ice.AsyncResult begin_logout(String userId, 
                                         String token, 
                                         java.util.Map<String, String> __ctx, 
                                         boolean __explicitCtx, 
                                         boolean __synchronous, 
                                         IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__logout_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__logout_name, __cb);
        try
        {
            __result.prepare(__logout_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(userId);
            __os.writeString(token);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_logout(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __logout_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __logout_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.user.PltUserServicePrx __proxy = (com.juzix.plt.slice.user.PltUserServicePrx)__result.getProxy();
        try
        {
            __proxy.end_logout(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __queryUserInfo_name = "queryUserInfo";

    public PltUserInfo queryUserInfo(String userId)
        throws com.juzix.plt.slice.common.PltException
    {
        return queryUserInfo(userId, null, false);
    }

    public PltUserInfo queryUserInfo(String userId, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return queryUserInfo(userId, __ctx, true);
    }

    private PltUserInfo queryUserInfo(String userId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__queryUserInfo_name);
        return end_queryUserInfo(begin_queryUserInfo(userId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId)
    {
        return begin_queryUserInfo(userId, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId, java.util.Map<String, String> __ctx)
    {
        return begin_queryUserInfo(userId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId, Ice.Callback __cb)
    {
        return begin_queryUserInfo(userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryUserInfo(userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId, Callback_PltUserService_queryUserInfo __cb)
    {
        return begin_queryUserInfo(userId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId, java.util.Map<String, String> __ctx, Callback_PltUserService_queryUserInfo __cb)
    {
        return begin_queryUserInfo(userId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId, 
                                               IceInternal.Functional_GenericCallback1<PltUserInfo> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserInfo(userId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId, 
                                               IceInternal.Functional_GenericCallback1<PltUserInfo> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserInfo(userId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<PltUserInfo> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserInfo(userId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserInfo(String userId, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<PltUserInfo> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserInfo(userId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryUserInfo(String userId, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<PltUserInfo> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserInfo(userId, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1UE<com.juzix.plt.slice.user.PltUserInfo>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               PltUserServicePrxHelper.__queryUserInfo_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_queryUserInfo(String userId, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryUserInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryUserInfo_name, __cb);
        try
        {
            __result.prepare(__queryUserInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(userId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public PltUserInfo end_queryUserInfo(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryUserInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            PltUserInfo __ret = null;
            __ret = PltUserInfo.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryUserInfo_completed(Ice.TwowayCallbackArg1UE<PltUserInfo> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.user.PltUserServicePrx __proxy = (com.juzix.plt.slice.user.PltUserServicePrx)__result.getProxy();
        PltUserInfo __ret = null;
        try
        {
            __ret = __proxy.end_queryUserInfo(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryUserInfoBatch_name = "queryUserInfoBatch";

    public PltUserInfo[] queryUserInfoBatch(String[] userIds)
        throws com.juzix.plt.slice.common.PltException
    {
        return queryUserInfoBatch(userIds, null, false);
    }

    public PltUserInfo[] queryUserInfoBatch(String[] userIds, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return queryUserInfoBatch(userIds, __ctx, true);
    }

    private PltUserInfo[] queryUserInfoBatch(String[] userIds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__queryUserInfoBatch_name);
        return end_queryUserInfoBatch(begin_queryUserInfoBatch(userIds, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds)
    {
        return begin_queryUserInfoBatch(userIds, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, java.util.Map<String, String> __ctx)
    {
        return begin_queryUserInfoBatch(userIds, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, Ice.Callback __cb)
    {
        return begin_queryUserInfoBatch(userIds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryUserInfoBatch(userIds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, Callback_PltUserService_queryUserInfoBatch __cb)
    {
        return begin_queryUserInfoBatch(userIds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, java.util.Map<String, String> __ctx, Callback_PltUserService_queryUserInfoBatch __cb)
    {
        return begin_queryUserInfoBatch(userIds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, 
                                                    IceInternal.Functional_GenericCallback1<PltUserInfo[]> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserInfoBatch(userIds, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, 
                                                    IceInternal.Functional_GenericCallback1<PltUserInfo[]> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserInfoBatch(userIds, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<PltUserInfo[]> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryUserInfoBatch(userIds, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, 
                                                    java.util.Map<String, String> __ctx, 
                                                    IceInternal.Functional_GenericCallback1<PltUserInfo[]> __responseCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                    IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                    IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserInfoBatch(userIds, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.Functional_GenericCallback1<PltUserInfo[]> __responseCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                     IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                     IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryUserInfoBatch(userIds, __ctx, __explicitCtx, __synchronous, 
                                        new IceInternal.Functional_TwowayCallbackArg1UE<com.juzix.plt.slice.user.PltUserInfo[]>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                            {
                                                public final void __completed(Ice.AsyncResult __result)
                                                {
                                                    PltUserServicePrxHelper.__queryUserInfoBatch_completed(this, __result);
                                                }
                                            });
    }

    private Ice.AsyncResult begin_queryUserInfoBatch(String[] userIds, 
                                                     java.util.Map<String, String> __ctx, 
                                                     boolean __explicitCtx, 
                                                     boolean __synchronous, 
                                                     IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryUserInfoBatch_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryUserInfoBatch_name, __cb);
        try
        {
            __result.prepare(__queryUserInfoBatch_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            com.juzix.plt.slice.common.StringListHelper.write(__os, userIds);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public PltUserInfo[] end_queryUserInfoBatch(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryUserInfoBatch_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            PltUserInfo[] __ret;
            __ret = userInfoListHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryUserInfoBatch_completed(Ice.TwowayCallbackArg1UE<PltUserInfo[]> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.user.PltUserServicePrx __proxy = (com.juzix.plt.slice.user.PltUserServicePrx)__result.getProxy();
        PltUserInfo[] __ret = null;
        try
        {
            __ret = __proxy.end_queryUserInfoBatch(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __validationToken_name = "validationToken";

    public boolean validationToken(String userId, String token)
        throws com.juzix.plt.slice.common.PltException
    {
        return validationToken(userId, token, null, false);
    }

    public boolean validationToken(String userId, String token, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return validationToken(userId, token, __ctx, true);
    }

    private boolean validationToken(String userId, String token, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__validationToken_name);
        return end_validationToken(begin_validationToken(userId, token, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_validationToken(String userId, String token)
    {
        return begin_validationToken(userId, token, null, false, false, null);
    }

    public Ice.AsyncResult begin_validationToken(String userId, String token, java.util.Map<String, String> __ctx)
    {
        return begin_validationToken(userId, token, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_validationToken(String userId, String token, Ice.Callback __cb)
    {
        return begin_validationToken(userId, token, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_validationToken(String userId, String token, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_validationToken(userId, token, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_validationToken(String userId, String token, Callback_PltUserService_validationToken __cb)
    {
        return begin_validationToken(userId, token, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_validationToken(String userId, String token, java.util.Map<String, String> __ctx, Callback_PltUserService_validationToken __cb)
    {
        return begin_validationToken(userId, token, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_validationToken(String userId, 
                                                 String token, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_validationToken(userId, token, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_validationToken(String userId, 
                                                 String token, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_validationToken(userId, token, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_validationToken(String userId, 
                                                 String token, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_validationToken(userId, token, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_validationToken(String userId, 
                                                 String token, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_BoolCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_validationToken(userId, token, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_validationToken(String userId, 
                                                  String token, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_BoolCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_validationToken(userId, token, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackBoolUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 PltUserServicePrxHelper.__validationToken_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_validationToken(String userId, 
                                                  String token, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__validationToken_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__validationToken_name, __cb);
        try
        {
            __result.prepare(__validationToken_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(userId);
            __os.writeString(token);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public boolean end_validationToken(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __validationToken_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            boolean __ret;
            __ret = __is.readBool();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __validationToken_completed(Ice.TwowayCallbackBoolUE __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.user.PltUserServicePrx __proxy = (com.juzix.plt.slice.user.PltUserServicePrx)__result.getProxy();
        boolean __ret = false;
        try
        {
            __ret = __proxy.end_validationToken(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltUserServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), PltUserServicePrx.class, PltUserServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltUserServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), PltUserServicePrx.class, PltUserServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltUserServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), PltUserServicePrx.class, PltUserServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltUserServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), PltUserServicePrx.class, PltUserServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static PltUserServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, PltUserServicePrx.class, PltUserServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static PltUserServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, PltUserServicePrx.class, PltUserServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::user::PltUserService"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, PltUserServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static PltUserServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PltUserServicePrxHelper result = new PltUserServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
