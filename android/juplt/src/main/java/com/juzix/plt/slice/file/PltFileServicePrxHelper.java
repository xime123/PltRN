// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `plt_file_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.juzix.plt.slice.file;

/**
 * Provides type-specific helper functions.
 **/
public final class PltFileServicePrxHelper extends Ice.ObjectPrxHelperBase implements PltFileServicePrx
{
    private static final String __bigFileUpload_name = "bigFileUpload";

    public String bigFileUpload(String fileId, int totalBytes, int startBytes, int endBytes, byte[] content)
        throws com.juzix.plt.slice.common.PltException
    {
        return bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, null, false);
    }

    public String bigFileUpload(String fileId, int totalBytes, int startBytes, int endBytes, byte[] content, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, __ctx, true);
    }

    private String bigFileUpload(String fileId, int totalBytes, int startBytes, int endBytes, byte[] content, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__bigFileUpload_name);
        return end_bigFileUpload(begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, int totalBytes, int startBytes, int endBytes, byte[] content)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, null, false, false, null);
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, int totalBytes, int startBytes, int endBytes, byte[] content, java.util.Map<String, String> __ctx)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, int totalBytes, int startBytes, int endBytes, byte[] content, Ice.Callback __cb)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, int totalBytes, int startBytes, int endBytes, byte[] content, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, int totalBytes, int startBytes, int endBytes, byte[] content, Callback_PltFileService_bigFileUpload __cb)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, int totalBytes, int startBytes, int endBytes, byte[] content, java.util.Map<String, String> __ctx, Callback_PltFileService_bigFileUpload __cb)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, 
                                               int totalBytes, 
                                               int startBytes, 
                                               int endBytes, 
                                               byte[] content, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, 
                                               int totalBytes, 
                                               int startBytes, 
                                               int endBytes, 
                                               byte[] content, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, 
                                               int totalBytes, 
                                               int startBytes, 
                                               int endBytes, 
                                               byte[] content, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_bigFileUpload(String fileId, 
                                               int totalBytes, 
                                               int startBytes, 
                                               int endBytes, 
                                               byte[] content, 
                                               java.util.Map<String, String> __ctx, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_bigFileUpload(String fileId, 
                                                int totalBytes, 
                                                int startBytes, 
                                                int endBytes, 
                                                byte[] content, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_bigFileUpload(fileId, totalBytes, startBytes, endBytes, content, __ctx, __explicitCtx, __synchronous, 
                                   new IceInternal.Functional_TwowayCallbackArg1UE<String>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                       {
                                           public final void __completed(Ice.AsyncResult __result)
                                           {
                                               PltFileServicePrxHelper.__bigFileUpload_completed(this, __result);
                                           }
                                       });
    }

    private Ice.AsyncResult begin_bigFileUpload(String fileId, 
                                                int totalBytes, 
                                                int startBytes, 
                                                int endBytes, 
                                                byte[] content, 
                                                java.util.Map<String, String> __ctx, 
                                                boolean __explicitCtx, 
                                                boolean __synchronous, 
                                                IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__bigFileUpload_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__bigFileUpload_name, __cb);
        try
        {
            __result.prepare(__bigFileUpload_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(fileId);
            __os.writeInt(totalBytes);
            __os.writeInt(startBytes);
            __os.writeInt(endBytes);
            Ice.ByteSeqHelper.write(__os, content);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_bigFileUpload(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __bigFileUpload_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __bigFileUpload_completed(Ice.TwowayCallbackArg1UE<String> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.file.PltFileServicePrx __proxy = (com.juzix.plt.slice.file.PltFileServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_bigFileUpload(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __createDownTask_name = "createDownTask";

    public PltDownTaskResp createDownTask(String userId, String token, String fileId)
        throws com.juzix.plt.slice.common.PltException
    {
        return createDownTask(userId, token, fileId, null, false);
    }

    public PltDownTaskResp createDownTask(String userId, String token, String fileId, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return createDownTask(userId, token, fileId, __ctx, true);
    }

    private PltDownTaskResp createDownTask(String userId, String token, String fileId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__createDownTask_name);
        return end_createDownTask(begin_createDownTask(userId, token, fileId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createDownTask(String userId, String token, String fileId)
    {
        return begin_createDownTask(userId, token, fileId, null, false, false, null);
    }

    public Ice.AsyncResult begin_createDownTask(String userId, String token, String fileId, java.util.Map<String, String> __ctx)
    {
        return begin_createDownTask(userId, token, fileId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createDownTask(String userId, String token, String fileId, Ice.Callback __cb)
    {
        return begin_createDownTask(userId, token, fileId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createDownTask(String userId, String token, String fileId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createDownTask(userId, token, fileId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createDownTask(String userId, String token, String fileId, Callback_PltFileService_createDownTask __cb)
    {
        return begin_createDownTask(userId, token, fileId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createDownTask(String userId, String token, String fileId, java.util.Map<String, String> __ctx, Callback_PltFileService_createDownTask __cb)
    {
        return begin_createDownTask(userId, token, fileId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createDownTask(String userId, 
                                                String token, 
                                                String fileId, 
                                                IceInternal.Functional_GenericCallback1<PltDownTaskResp> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createDownTask(userId, token, fileId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createDownTask(String userId, 
                                                String token, 
                                                String fileId, 
                                                IceInternal.Functional_GenericCallback1<PltDownTaskResp> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createDownTask(userId, token, fileId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createDownTask(String userId, 
                                                String token, 
                                                String fileId, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<PltDownTaskResp> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createDownTask(userId, token, fileId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createDownTask(String userId, 
                                                String token, 
                                                String fileId, 
                                                java.util.Map<String, String> __ctx, 
                                                IceInternal.Functional_GenericCallback1<PltDownTaskResp> __responseCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createDownTask(userId, token, fileId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createDownTask(String userId, 
                                                 String token, 
                                                 String fileId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.Functional_GenericCallback1<PltDownTaskResp> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createDownTask(userId, token, fileId, __ctx, __explicitCtx, __synchronous, 
                                    new IceInternal.Functional_TwowayCallbackArg1UE<com.juzix.plt.slice.file.PltDownTaskResp>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                        {
                                            public final void __completed(Ice.AsyncResult __result)
                                            {
                                                PltFileServicePrxHelper.__createDownTask_completed(this, __result);
                                            }
                                        });
    }

    private Ice.AsyncResult begin_createDownTask(String userId, 
                                                 String token, 
                                                 String fileId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 boolean __explicitCtx, 
                                                 boolean __synchronous, 
                                                 IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createDownTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createDownTask_name, __cb);
        try
        {
            __result.prepare(__createDownTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(userId);
            __os.writeString(token);
            __os.writeString(fileId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public PltDownTaskResp end_createDownTask(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createDownTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            PltDownTaskResp __ret = null;
            __ret = PltDownTaskResp.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createDownTask_completed(Ice.TwowayCallbackArg1UE<PltDownTaskResp> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.file.PltFileServicePrx __proxy = (com.juzix.plt.slice.file.PltFileServicePrx)__result.getProxy();
        PltDownTaskResp __ret = null;
        try
        {
            __ret = __proxy.end_createDownTask(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __createUpTask_name = "createUpTask";

    public String createUpTask(String userId, String token, int totalBytes, String fileType)
        throws com.juzix.plt.slice.common.PltException
    {
        return createUpTask(userId, token, totalBytes, fileType, null, false);
    }

    public String createUpTask(String userId, String token, int totalBytes, String fileType, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return createUpTask(userId, token, totalBytes, fileType, __ctx, true);
    }

    private String createUpTask(String userId, String token, int totalBytes, String fileType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__createUpTask_name);
        return end_createUpTask(begin_createUpTask(userId, token, totalBytes, fileType, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_createUpTask(String userId, String token, int totalBytes, String fileType)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, null, false, false, null);
    }

    public Ice.AsyncResult begin_createUpTask(String userId, String token, int totalBytes, String fileType, java.util.Map<String, String> __ctx)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_createUpTask(String userId, String token, int totalBytes, String fileType, Ice.Callback __cb)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createUpTask(String userId, String token, int totalBytes, String fileType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createUpTask(String userId, String token, int totalBytes, String fileType, Callback_PltFileService_createUpTask __cb)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_createUpTask(String userId, String token, int totalBytes, String fileType, java.util.Map<String, String> __ctx, Callback_PltFileService_createUpTask __cb)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_createUpTask(String userId, 
                                              String token, 
                                              int totalBytes, 
                                              String fileType, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createUpTask(String userId, 
                                              String token, 
                                              int totalBytes, 
                                              String fileType, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_createUpTask(String userId, 
                                              String token, 
                                              int totalBytes, 
                                              String fileType, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_createUpTask(String userId, 
                                              String token, 
                                              int totalBytes, 
                                              String fileType, 
                                              java.util.Map<String, String> __ctx, 
                                              IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                              IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                              IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_createUpTask(String userId, 
                                               String token, 
                                               int totalBytes, 
                                               String fileType, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                               IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                               IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_createUpTask(userId, token, totalBytes, fileType, __ctx, __explicitCtx, __synchronous, 
                                  new IceInternal.Functional_TwowayCallbackArg1UE<String>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                      {
                                          public final void __completed(Ice.AsyncResult __result)
                                          {
                                              PltFileServicePrxHelper.__createUpTask_completed(this, __result);
                                          }
                                      });
    }

    private Ice.AsyncResult begin_createUpTask(String userId, 
                                               String token, 
                                               int totalBytes, 
                                               String fileType, 
                                               java.util.Map<String, String> __ctx, 
                                               boolean __explicitCtx, 
                                               boolean __synchronous, 
                                               IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__createUpTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__createUpTask_name, __cb);
        try
        {
            __result.prepare(__createUpTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(userId);
            __os.writeString(token);
            __os.writeInt(totalBytes);
            __os.writeString(fileType);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_createUpTask(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __createUpTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __createUpTask_completed(Ice.TwowayCallbackArg1UE<String> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.file.PltFileServicePrx __proxy = (com.juzix.plt.slice.file.PltFileServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_createUpTask(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __endUpTask_name = "endUpTask";

    public String endUpTask(String fileId, PltEndType action)
        throws com.juzix.plt.slice.common.PltException
    {
        return endUpTask(fileId, action, null, false);
    }

    public String endUpTask(String fileId, PltEndType action, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return endUpTask(fileId, action, __ctx, true);
    }

    private String endUpTask(String fileId, PltEndType action, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__endUpTask_name);
        return end_endUpTask(begin_endUpTask(fileId, action, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, PltEndType action)
    {
        return begin_endUpTask(fileId, action, null, false, false, null);
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, PltEndType action, java.util.Map<String, String> __ctx)
    {
        return begin_endUpTask(fileId, action, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, PltEndType action, Ice.Callback __cb)
    {
        return begin_endUpTask(fileId, action, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, PltEndType action, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_endUpTask(fileId, action, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, PltEndType action, Callback_PltFileService_endUpTask __cb)
    {
        return begin_endUpTask(fileId, action, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, PltEndType action, java.util.Map<String, String> __ctx, Callback_PltFileService_endUpTask __cb)
    {
        return begin_endUpTask(fileId, action, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, 
                                           PltEndType action, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_endUpTask(fileId, action, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, 
                                           PltEndType action, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_endUpTask(fileId, action, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, 
                                           PltEndType action, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_endUpTask(fileId, action, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_endUpTask(String fileId, 
                                           PltEndType action, 
                                           java.util.Map<String, String> __ctx, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_endUpTask(fileId, action, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_endUpTask(String fileId, 
                                            PltEndType action, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                            IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                            IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_endUpTask(fileId, action, __ctx, __explicitCtx, __synchronous, 
                               new IceInternal.Functional_TwowayCallbackArg1UE<String>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                   {
                                       public final void __completed(Ice.AsyncResult __result)
                                       {
                                           PltFileServicePrxHelper.__endUpTask_completed(this, __result);
                                       }
                                   });
    }

    private Ice.AsyncResult begin_endUpTask(String fileId, 
                                            PltEndType action, 
                                            java.util.Map<String, String> __ctx, 
                                            boolean __explicitCtx, 
                                            boolean __synchronous, 
                                            IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__endUpTask_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__endUpTask_name, __cb);
        try
        {
            __result.prepare(__endUpTask_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(fileId);
            PltEndType.__write(__os, action);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_endUpTask(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __endUpTask_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __endUpTask_completed(Ice.TwowayCallbackArg1UE<String> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.file.PltFileServicePrx __proxy = (com.juzix.plt.slice.file.PltFileServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_endUpTask(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __fileDown_name = "fileDown";

    public PltFileDownResp fileDown(PltFileDownReq req)
        throws com.juzix.plt.slice.common.PltException
    {
        return fileDown(req, null, false);
    }

    public PltFileDownResp fileDown(PltFileDownReq req, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return fileDown(req, __ctx, true);
    }

    private PltFileDownResp fileDown(PltFileDownReq req, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__fileDown_name);
        return end_fileDown(begin_fileDown(req, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req)
    {
        return begin_fileDown(req, null, false, false, null);
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req, java.util.Map<String, String> __ctx)
    {
        return begin_fileDown(req, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req, Ice.Callback __cb)
    {
        return begin_fileDown(req, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_fileDown(req, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req, Callback_PltFileService_fileDown __cb)
    {
        return begin_fileDown(req, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req, java.util.Map<String, String> __ctx, Callback_PltFileService_fileDown __cb)
    {
        return begin_fileDown(req, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req, 
                                          IceInternal.Functional_GenericCallback1<PltFileDownResp> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_fileDown(req, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req, 
                                          IceInternal.Functional_GenericCallback1<PltFileDownResp> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fileDown(req, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<PltFileDownResp> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_fileDown(req, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_fileDown(PltFileDownReq req, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<PltFileDownResp> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fileDown(req, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_fileDown(PltFileDownReq req, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<PltFileDownResp> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_fileDown(req, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1UE<com.juzix.plt.slice.file.PltFileDownResp>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          PltFileServicePrxHelper.__fileDown_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_fileDown(PltFileDownReq req, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__fileDown_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__fileDown_name, __cb);
        try
        {
            __result.prepare(__fileDown_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            PltFileDownReq.__write(__os, req);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public PltFileDownResp end_fileDown(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __fileDown_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            PltFileDownResp __ret = null;
            __ret = PltFileDownResp.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __fileDown_completed(Ice.TwowayCallbackArg1UE<PltFileDownResp> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.file.PltFileServicePrx __proxy = (com.juzix.plt.slice.file.PltFileServicePrx)__result.getProxy();
        PltFileDownResp __ret = null;
        try
        {
            __ret = __proxy.end_fileDown(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __smallFileUpload_name = "smallFileUpload";

    public String smallFileUpload(String userId, String token, int totalBytes, byte[] content, String fileType)
        throws com.juzix.plt.slice.common.PltException
    {
        return smallFileUpload(userId, token, totalBytes, content, fileType, null, false);
    }

    public String smallFileUpload(String userId, String token, int totalBytes, byte[] content, String fileType, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return smallFileUpload(userId, token, totalBytes, content, fileType, __ctx, true);
    }

    private String smallFileUpload(String userId, String token, int totalBytes, byte[] content, String fileType, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__smallFileUpload_name);
        return end_smallFileUpload(begin_smallFileUpload(userId, token, totalBytes, content, fileType, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, String token, int totalBytes, byte[] content, String fileType)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, null, false, false, null);
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, String token, int totalBytes, byte[] content, String fileType, java.util.Map<String, String> __ctx)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, String token, int totalBytes, byte[] content, String fileType, Ice.Callback __cb)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, String token, int totalBytes, byte[] content, String fileType, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, String token, int totalBytes, byte[] content, String fileType, Callback_PltFileService_smallFileUpload __cb)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, String token, int totalBytes, byte[] content, String fileType, java.util.Map<String, String> __ctx, Callback_PltFileService_smallFileUpload __cb)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, 
                                                 String token, 
                                                 int totalBytes, 
                                                 byte[] content, 
                                                 String fileType, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, 
                                                 String token, 
                                                 int totalBytes, 
                                                 byte[] content, 
                                                 String fileType, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, 
                                                 String token, 
                                                 int totalBytes, 
                                                 byte[] content, 
                                                 String fileType, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_smallFileUpload(String userId, 
                                                 String token, 
                                                 int totalBytes, 
                                                 byte[] content, 
                                                 String fileType, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_smallFileUpload(String userId, 
                                                  String token, 
                                                  int totalBytes, 
                                                  byte[] content, 
                                                  String fileType, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_smallFileUpload(userId, token, totalBytes, content, fileType, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1UE<String>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 PltFileServicePrxHelper.__smallFileUpload_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_smallFileUpload(String userId, 
                                                  String token, 
                                                  int totalBytes, 
                                                  byte[] content, 
                                                  String fileType, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__smallFileUpload_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__smallFileUpload_name, __cb);
        try
        {
            __result.prepare(__smallFileUpload_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(userId);
            __os.writeString(token);
            __os.writeInt(totalBytes);
            Ice.ByteSeqHelper.write(__os, content);
            __os.writeString(fileType);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_smallFileUpload(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __smallFileUpload_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __smallFileUpload_completed(Ice.TwowayCallbackArg1UE<String> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.file.PltFileServicePrx __proxy = (com.juzix.plt.slice.file.PltFileServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_smallFileUpload(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltFileServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), PltFileServicePrx.class, PltFileServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltFileServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), PltFileServicePrx.class, PltFileServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltFileServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), PltFileServicePrx.class, PltFileServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltFileServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), PltFileServicePrx.class, PltFileServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static PltFileServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, PltFileServicePrx.class, PltFileServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static PltFileServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, PltFileServicePrx.class, PltFileServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::file::PltFileService"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, PltFileServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static PltFileServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PltFileServicePrxHelper result = new PltFileServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
