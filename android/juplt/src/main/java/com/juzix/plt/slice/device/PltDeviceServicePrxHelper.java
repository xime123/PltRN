// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `plt_device_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.juzix.plt.slice.device;

/**
 * Provides type-specific helper functions.
 **/
public final class PltDeviceServicePrxHelper extends Ice.ObjectPrxHelperBase implements PltDeviceServicePrx
{
    private static final String __deleteSelective_name = "deleteSelective";

    public void deleteSelective(String deviceId, String[] fields)
        throws com.juzix.plt.slice.common.PltException
    {
        deleteSelective(deviceId, fields, null, false);
    }

    public void deleteSelective(String deviceId, String[] fields, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        deleteSelective(deviceId, fields, __ctx, true);
    }

    private void deleteSelective(String deviceId, String[] fields, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__deleteSelective_name);
        end_deleteSelective(begin_deleteSelective(deviceId, fields, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, String[] fields)
    {
        return begin_deleteSelective(deviceId, fields, null, false, false, null);
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, String[] fields, java.util.Map<String, String> __ctx)
    {
        return begin_deleteSelective(deviceId, fields, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, String[] fields, Ice.Callback __cb)
    {
        return begin_deleteSelective(deviceId, fields, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, String[] fields, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_deleteSelective(deviceId, fields, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, String[] fields, Callback_PltDeviceService_deleteSelective __cb)
    {
        return begin_deleteSelective(deviceId, fields, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, String[] fields, java.util.Map<String, String> __ctx, Callback_PltDeviceService_deleteSelective __cb)
    {
        return begin_deleteSelective(deviceId, fields, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, 
                                                 String[] fields, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteSelective(deviceId, fields, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, 
                                                 String[] fields, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteSelective(deviceId, fields, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, 
                                                 String[] fields, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_deleteSelective(deviceId, fields, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_deleteSelective(String deviceId, 
                                                 String[] fields, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteSelective(deviceId, fields, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_deleteSelective(String deviceId, 
                                                  String[] fields, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_VoidCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_deleteSelective(deviceId, fields, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 PltDeviceServicePrxHelper.__deleteSelective_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_deleteSelective(String deviceId, 
                                                  String[] fields, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__deleteSelective_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__deleteSelective_name, __cb);
        try
        {
            __result.prepare(__deleteSelective_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceId);
            com.juzix.plt.slice.common.StringListHelper.write(__os, fields);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_deleteSelective(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __deleteSelective_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __deleteSelective_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.device.PltDeviceServicePrx __proxy = (com.juzix.plt.slice.device.PltDeviceServicePrx)__result.getProxy();
        try
        {
            __proxy.end_deleteSelective(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    private static final String __queryDeviceInfo_name = "queryDeviceInfo";

    public PltDeviceInfo queryDeviceInfo(String deviceId)
        throws com.juzix.plt.slice.common.PltException
    {
        return queryDeviceInfo(deviceId, null, false);
    }

    public PltDeviceInfo queryDeviceInfo(String deviceId, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return queryDeviceInfo(deviceId, __ctx, true);
    }

    private PltDeviceInfo queryDeviceInfo(String deviceId, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__queryDeviceInfo_name);
        return end_queryDeviceInfo(begin_queryDeviceInfo(deviceId, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId)
    {
        return begin_queryDeviceInfo(deviceId, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId, java.util.Map<String, String> __ctx)
    {
        return begin_queryDeviceInfo(deviceId, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId, Ice.Callback __cb)
    {
        return begin_queryDeviceInfo(deviceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryDeviceInfo(deviceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId, Callback_PltDeviceService_queryDeviceInfo __cb)
    {
        return begin_queryDeviceInfo(deviceId, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId, java.util.Map<String, String> __ctx, Callback_PltDeviceService_queryDeviceInfo __cb)
    {
        return begin_queryDeviceInfo(deviceId, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId, 
                                                 IceInternal.Functional_GenericCallback1<PltDeviceInfo> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDeviceInfo(deviceId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId, 
                                                 IceInternal.Functional_GenericCallback1<PltDeviceInfo> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDeviceInfo(deviceId, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<PltDeviceInfo> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDeviceInfo(deviceId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDeviceInfo(String deviceId, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_GenericCallback1<PltDeviceInfo> __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDeviceInfo(deviceId, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryDeviceInfo(String deviceId, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_GenericCallback1<PltDeviceInfo> __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDeviceInfo(deviceId, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackArg1UE<com.juzix.plt.slice.device.PltDeviceInfo>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 PltDeviceServicePrxHelper.__queryDeviceInfo_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_queryDeviceInfo(String deviceId, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryDeviceInfo_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryDeviceInfo_name, __cb);
        try
        {
            __result.prepare(__queryDeviceInfo_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceId);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public PltDeviceInfo end_queryDeviceInfo(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryDeviceInfo_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            PltDeviceInfo __ret = null;
            __ret = PltDeviceInfo.__read(__is, __ret);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryDeviceInfo_completed(Ice.TwowayCallbackArg1UE<PltDeviceInfo> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.device.PltDeviceServicePrx __proxy = (com.juzix.plt.slice.device.PltDeviceServicePrx)__result.getProxy();
        PltDeviceInfo __ret = null;
        try
        {
            __ret = __proxy.end_queryDeviceInfo(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __queryDeviceInfoBatch_name = "queryDeviceInfoBatch";

    public PltDeviceInfo[] queryDeviceInfoBatch(String[] deviceIds)
        throws com.juzix.plt.slice.common.PltException
    {
        return queryDeviceInfoBatch(deviceIds, null, false);
    }

    public PltDeviceInfo[] queryDeviceInfoBatch(String[] deviceIds, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return queryDeviceInfoBatch(deviceIds, __ctx, true);
    }

    private PltDeviceInfo[] queryDeviceInfoBatch(String[] deviceIds, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__queryDeviceInfoBatch_name);
        return end_queryDeviceInfoBatch(begin_queryDeviceInfoBatch(deviceIds, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds)
    {
        return begin_queryDeviceInfoBatch(deviceIds, null, false, false, null);
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, java.util.Map<String, String> __ctx)
    {
        return begin_queryDeviceInfoBatch(deviceIds, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, Ice.Callback __cb)
    {
        return begin_queryDeviceInfoBatch(deviceIds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_queryDeviceInfoBatch(deviceIds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, Callback_PltDeviceService_queryDeviceInfoBatch __cb)
    {
        return begin_queryDeviceInfoBatch(deviceIds, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, java.util.Map<String, String> __ctx, Callback_PltDeviceService_queryDeviceInfoBatch __cb)
    {
        return begin_queryDeviceInfoBatch(deviceIds, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, 
                                                      IceInternal.Functional_GenericCallback1<PltDeviceInfo[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDeviceInfoBatch(deviceIds, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, 
                                                      IceInternal.Functional_GenericCallback1<PltDeviceInfo[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDeviceInfoBatch(deviceIds, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<PltDeviceInfo[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_queryDeviceInfoBatch(deviceIds, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, 
                                                      java.util.Map<String, String> __ctx, 
                                                      IceInternal.Functional_GenericCallback1<PltDeviceInfo[]> __responseCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                      IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                      IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDeviceInfoBatch(deviceIds, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.Functional_GenericCallback1<PltDeviceInfo[]> __responseCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                       IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                       IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_queryDeviceInfoBatch(deviceIds, __ctx, __explicitCtx, __synchronous, 
                                          new IceInternal.Functional_TwowayCallbackArg1UE<com.juzix.plt.slice.device.PltDeviceInfo[]>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                              {
                                                  public final void __completed(Ice.AsyncResult __result)
                                                  {
                                                      PltDeviceServicePrxHelper.__queryDeviceInfoBatch_completed(this, __result);
                                                  }
                                              });
    }

    private Ice.AsyncResult begin_queryDeviceInfoBatch(String[] deviceIds, 
                                                       java.util.Map<String, String> __ctx, 
                                                       boolean __explicitCtx, 
                                                       boolean __synchronous, 
                                                       IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__queryDeviceInfoBatch_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__queryDeviceInfoBatch_name, __cb);
        try
        {
            __result.prepare(__queryDeviceInfoBatch_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            com.juzix.plt.slice.common.StringListHelper.write(__os, deviceIds);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public PltDeviceInfo[] end_queryDeviceInfoBatch(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __queryDeviceInfoBatch_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            PltDeviceInfo[] __ret;
            __ret = deviceInfoListHelper.read(__is);
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __queryDeviceInfoBatch_completed(Ice.TwowayCallbackArg1UE<PltDeviceInfo[]> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.device.PltDeviceServicePrx __proxy = (com.juzix.plt.slice.device.PltDeviceServicePrx)__result.getProxy();
        PltDeviceInfo[] __ret = null;
        try
        {
            __ret = __proxy.end_queryDeviceInfoBatch(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __register_name = "register";

    public String register(String osType, String deviceIdentifier, String apns)
        throws com.juzix.plt.slice.common.PltException
    {
        return register(osType, deviceIdentifier, apns, null, false);
    }

    public String register(String osType, String deviceIdentifier, String apns, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        return register(osType, deviceIdentifier, apns, __ctx, true);
    }

    private String register(String osType, String deviceIdentifier, String apns, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__register_name);
        return end_register(begin_register(osType, deviceIdentifier, apns, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_register(String osType, String deviceIdentifier, String apns)
    {
        return begin_register(osType, deviceIdentifier, apns, null, false, false, null);
    }

    public Ice.AsyncResult begin_register(String osType, String deviceIdentifier, String apns, java.util.Map<String, String> __ctx)
    {
        return begin_register(osType, deviceIdentifier, apns, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_register(String osType, String deviceIdentifier, String apns, Ice.Callback __cb)
    {
        return begin_register(osType, deviceIdentifier, apns, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_register(String osType, String deviceIdentifier, String apns, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_register(osType, deviceIdentifier, apns, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_register(String osType, String deviceIdentifier, String apns, Callback_PltDeviceService_register __cb)
    {
        return begin_register(osType, deviceIdentifier, apns, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_register(String osType, String deviceIdentifier, String apns, java.util.Map<String, String> __ctx, Callback_PltDeviceService_register __cb)
    {
        return begin_register(osType, deviceIdentifier, apns, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_register(String osType, 
                                          String deviceIdentifier, 
                                          String apns, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_register(osType, deviceIdentifier, apns, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_register(String osType, 
                                          String deviceIdentifier, 
                                          String apns, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_register(osType, deviceIdentifier, apns, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_register(String osType, 
                                          String deviceIdentifier, 
                                          String apns, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_register(osType, deviceIdentifier, apns, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_register(String osType, 
                                          String deviceIdentifier, 
                                          String apns, 
                                          java.util.Map<String, String> __ctx, 
                                          IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                          IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                          IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_register(osType, deviceIdentifier, apns, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_register(String osType, 
                                           String deviceIdentifier, 
                                           String apns, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.Functional_GenericCallback1<String> __responseCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                           IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                           IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_register(osType, deviceIdentifier, apns, __ctx, __explicitCtx, __synchronous, 
                              new IceInternal.Functional_TwowayCallbackArg1UE<String>(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                  {
                                      public final void __completed(Ice.AsyncResult __result)
                                      {
                                          PltDeviceServicePrxHelper.__register_completed(this, __result);
                                      }
                                  });
    }

    private Ice.AsyncResult begin_register(String osType, 
                                           String deviceIdentifier, 
                                           String apns, 
                                           java.util.Map<String, String> __ctx, 
                                           boolean __explicitCtx, 
                                           boolean __synchronous, 
                                           IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__register_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__register_name, __cb);
        try
        {
            __result.prepare(__register_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(osType);
            __os.writeString(deviceIdentifier);
            __os.writeString(apns);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public String end_register(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __register_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.endReadParams();
            return __ret;
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __register_completed(Ice.TwowayCallbackArg1UE<String> __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.device.PltDeviceServicePrx __proxy = (com.juzix.plt.slice.device.PltDeviceServicePrx)__result.getProxy();
        String __ret = null;
        try
        {
            __ret = __proxy.end_register(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response(__ret);
    }

    private static final String __updateSelective_name = "updateSelective";

    public void updateSelective(String deviceId, PltDeviceInfo deviceInfo)
        throws com.juzix.plt.slice.common.PltException
    {
        updateSelective(deviceId, deviceInfo, null, false);
    }

    public void updateSelective(String deviceId, PltDeviceInfo deviceInfo, java.util.Map<String, String> __ctx)
        throws com.juzix.plt.slice.common.PltException
    {
        updateSelective(deviceId, deviceInfo, __ctx, true);
    }

    private void updateSelective(String deviceId, PltDeviceInfo deviceInfo, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws com.juzix.plt.slice.common.PltException
    {
        __checkTwowayOnly(__updateSelective_name);
        end_updateSelective(begin_updateSelective(deviceId, deviceInfo, __ctx, __explicitCtx, true, null));
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, PltDeviceInfo deviceInfo)
    {
        return begin_updateSelective(deviceId, deviceInfo, null, false, false, null);
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, PltDeviceInfo deviceInfo, java.util.Map<String, String> __ctx)
    {
        return begin_updateSelective(deviceId, deviceInfo, __ctx, true, false, null);
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, PltDeviceInfo deviceInfo, Ice.Callback __cb)
    {
        return begin_updateSelective(deviceId, deviceInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, PltDeviceInfo deviceInfo, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_updateSelective(deviceId, deviceInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, PltDeviceInfo deviceInfo, Callback_PltDeviceService_updateSelective __cb)
    {
        return begin_updateSelective(deviceId, deviceInfo, null, false, false, __cb);
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, PltDeviceInfo deviceInfo, java.util.Map<String, String> __ctx, Callback_PltDeviceService_updateSelective __cb)
    {
        return begin_updateSelective(deviceId, deviceInfo, __ctx, true, false, __cb);
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, 
                                                 PltDeviceInfo deviceInfo, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateSelective(deviceId, deviceInfo, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, 
                                                 PltDeviceInfo deviceInfo, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateSelective(deviceId, deviceInfo, null, false, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, 
                                                 PltDeviceInfo deviceInfo, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb)
    {
        return begin_updateSelective(deviceId, deviceInfo, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, null);
    }

    public Ice.AsyncResult begin_updateSelective(String deviceId, 
                                                 PltDeviceInfo deviceInfo, 
                                                 java.util.Map<String, String> __ctx, 
                                                 IceInternal.Functional_VoidCallback __responseCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                 IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                 IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateSelective(deviceId, deviceInfo, __ctx, true, false, __responseCb, __userExceptionCb, __exceptionCb, __sentCb);
    }

    private Ice.AsyncResult begin_updateSelective(String deviceId, 
                                                  PltDeviceInfo deviceInfo, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.Functional_VoidCallback __responseCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.UserException> __userExceptionCb, 
                                                  IceInternal.Functional_GenericCallback1<Ice.Exception> __exceptionCb, 
                                                  IceInternal.Functional_BoolCallback __sentCb)
    {
        return begin_updateSelective(deviceId, deviceInfo, __ctx, __explicitCtx, __synchronous, 
                                     new IceInternal.Functional_TwowayCallbackVoidUE(__responseCb, __userExceptionCb, __exceptionCb, __sentCb)
                                         {
                                             public final void __completed(Ice.AsyncResult __result)
                                             {
                                                 PltDeviceServicePrxHelper.__updateSelective_completed(this, __result);
                                             }
                                         });
    }

    private Ice.AsyncResult begin_updateSelective(String deviceId, 
                                                  PltDeviceInfo deviceInfo, 
                                                  java.util.Map<String, String> __ctx, 
                                                  boolean __explicitCtx, 
                                                  boolean __synchronous, 
                                                  IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__updateSelective_name);
        IceInternal.OutgoingAsync __result = getOutgoingAsync(__updateSelective_name, __cb);
        try
        {
            __result.prepare(__updateSelective_name, Ice.OperationMode.Normal, __ctx, __explicitCtx, __synchronous);
            IceInternal.BasicStream __os = __result.startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(deviceId);
            PltDeviceInfo.__write(__os, deviceInfo);
            __result.endWriteParams();
            __result.invoke();
        }
        catch(Ice.Exception __ex)
        {
            __result.abort(__ex);
        }
        return __result;
    }

    public void end_updateSelective(Ice.AsyncResult __iresult)
        throws com.juzix.plt.slice.common.PltException
    {
        IceInternal.OutgoingAsync __result = IceInternal.OutgoingAsync.check(__iresult, this, __updateSelective_name);
        try
        {
            if(!__result.__wait())
            {
                try
                {
                    __result.throwUserException();
                }
                catch(com.juzix.plt.slice.common.PltException __ex)
                {
                    throw __ex;
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            __result.readEmptyParams();
        }
        finally
        {
            if(__result != null)
            {
                __result.cacheMessageBuffers();
            }
        }
    }

    static public void __updateSelective_completed(Ice.TwowayCallbackVoidUE __cb, Ice.AsyncResult __result)
    {
        com.juzix.plt.slice.device.PltDeviceServicePrx __proxy = (com.juzix.plt.slice.device.PltDeviceServicePrx)__result.getProxy();
        try
        {
            __proxy.end_updateSelective(__result);
        }
        catch(Ice.UserException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.LocalException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        catch(Ice.SystemException __ex)
        {
            __cb.exception(__ex);
            return;
        }
        __cb.response();
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltDeviceServicePrx checkedCast(Ice.ObjectPrx __obj)
    {
        return checkedCastImpl(__obj, ice_staticId(), PltDeviceServicePrx.class, PltDeviceServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltDeviceServicePrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __ctx, ice_staticId(), PltDeviceServicePrx.class, PltDeviceServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltDeviceServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return checkedCastImpl(__obj, __facet, ice_staticId(), PltDeviceServicePrx.class, PltDeviceServicePrxHelper.class);
    }

    /**
     * Contacts the remote server to verify that a facet of the object implements this type.
     * Raises a local exception if a communication error occurs.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @param __ctx The Context map to send with the invocation.
     * @return A proxy for this type, or null if the object does not support this type.
     **/
    public static PltDeviceServicePrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        return checkedCastImpl(__obj, __facet, __ctx, ice_staticId(), PltDeviceServicePrx.class, PltDeviceServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @return A proxy for this type.
     **/
    public static PltDeviceServicePrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        return uncheckedCastImpl(__obj, PltDeviceServicePrx.class, PltDeviceServicePrxHelper.class);
    }

    /**
     * Downcasts the given proxy to this type without contacting the remote server.
     * @param __obj The untyped proxy.
     * @param __facet The name of the desired facet.
     * @return A proxy for this type.
     **/
    public static PltDeviceServicePrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        return uncheckedCastImpl(__obj, __facet, PltDeviceServicePrx.class, PltDeviceServicePrxHelper.class);
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::device::PltDeviceService"
    };

    /**
     * Provides the Slice type ID of this type.
     * @return The Slice type ID.
     **/
    public static String ice_staticId()
    {
        return __ids[1];
    }

    public static void __write(IceInternal.BasicStream __os, PltDeviceServicePrx v)
    {
        __os.writeProxy(v);
    }

    public static PltDeviceServicePrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            PltDeviceServicePrxHelper result = new PltDeviceServicePrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
