// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `plt_respcode.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.juzix.plt.slice.common;

public enum RespCode implements java.io.Serializable
{
    
    Success(0),
    
    SystemDefaultError(1000),
    
    DataAgentServiceError(1001),
    
    JuLoggerServiceError(1002),
    
    RedisServiceError(1003),
    
    DeviceServiceError(2000),
    
    DeviceIdIsBlank(2001),
    
    OsTypeIsBlank(2002),
    
    DeviceIdentifierIsBlank(2003),
    
    PltSessionError(2100),
    
    MessageServiceError(3000),
    
    UserServiceError(4000),
    
    FileServiceError(5000),
    
    ProxyServiceError(6000),
    
    AuthenticationFailure(6001),
    
    BizServiceError(6002);

    public int
    value()
    {
        return __value;
    }

    public static RespCode
    valueOf(int __v)
    {
        switch(__v)
        {
        case 0:
            return Success;
        case 1000:
            return SystemDefaultError;
        case 1001:
            return DataAgentServiceError;
        case 1002:
            return JuLoggerServiceError;
        case 1003:
            return RedisServiceError;
        case 2000:
            return DeviceServiceError;
        case 2001:
            return DeviceIdIsBlank;
        case 2002:
            return OsTypeIsBlank;
        case 2003:
            return DeviceIdentifierIsBlank;
        case 2100:
            return PltSessionError;
        case 3000:
            return MessageServiceError;
        case 4000:
            return UserServiceError;
        case 5000:
            return FileServiceError;
        case 6000:
            return ProxyServiceError;
        case 6001:
            return AuthenticationFailure;
        case 6002:
            return BizServiceError;
        }
        return null;
    }

    private
    RespCode(int __v)
    {
        __value = __v;
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeEnum(value(), 6002);
    }

    public static void
    __write(IceInternal.BasicStream __os, RespCode __v)
    {
        if(__v == null)
        {
            __os.writeEnum(com.juzix.plt.slice.common.RespCode.Success.value(), 6002);
        }
        else
        {
            __os.writeEnum(__v.value(), 6002);
        }
    }

    public static RespCode
    __read(IceInternal.BasicStream __is)
    {
        int __v = __is.readEnum(6002);
        return __validate(__v);
    }

    private static RespCode
    __validate(int __v)
    {
        final RespCode __e = valueOf(__v);
        if(__e == null)
        {
            throw new Ice.MarshalException("enumerator value " + __v + " is out of range");
        }
        return __e;
    }

    private final int __value;
}
