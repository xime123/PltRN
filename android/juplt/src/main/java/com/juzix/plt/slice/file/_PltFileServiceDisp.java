// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `plt_file_service.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.juzix.plt.slice.file;

/**
 * 文件服务
 **/
public abstract class _PltFileServiceDisp extends Ice.ObjectImpl implements PltFileService
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::file::PltFileService"
    };

    public boolean ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[] ice_ids()
    {
        return __ids;
    }

    public String[] ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String ice_id()
    {
        return __ids[1];
    }

    public String ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String ice_staticId()
    {
        return __ids[1];
    }

    /**
     * 大文件上传
     * @param __cb The callback object for the operation.
     * @param fileId 文件id
     * @param startBytes 开始字节数
     * @param content 文件内容
     **/
    public final void bigFileUpload_async(AMD_PltFileService_bigFileUpload __cb, String fileId, int totalBytes, int startBytes, int endBytes, byte[] content)
        throws com.juzix.plt.slice.common.PltException
    {
        bigFileUpload_async(__cb, fileId, totalBytes, startBytes, endBytes, content, null);
    }

    /**
     * 创建下载任务
     * @param __cb The callback object for the operation.
     * @param userId 用户id
     * @param fileId 文件id
     **/
    public final void createDownTask_async(AMD_PltFileService_createDownTask __cb, String userId, String token, String fileId)
        throws com.juzix.plt.slice.common.PltException
    {
        createDownTask_async(__cb, userId, token, fileId, null);
    }

    /**
     * 大文件上传创建上传任务
     * @param __cb The callback object for the operation.
     * @param userId 用户id
     * @param totalBytes 文件总字节数
     **/
    public final void createUpTask_async(AMD_PltFileService_createUpTask __cb, String userId, String token, int totalBytes, String fileType)
        throws com.juzix.plt.slice.common.PltException
    {
        createUpTask_async(__cb, userId, token, totalBytes, fileType, null);
    }

    /**
     * 大文件上传结束上传任务
     * @param __cb The callback object for the operation.
     * @param fileId 文件id
     **/
    public final void endUpTask_async(AMD_PltFileService_endUpTask __cb, String fileId, PltEndType action)
        throws com.juzix.plt.slice.common.PltException
    {
        endUpTask_async(__cb, fileId, action, null);
    }

    /**
     * 文件下载
     * @param __cb The callback object for the operation.
     **/
    public final void fileDown_async(AMD_PltFileService_fileDown __cb, PltFileDownReq req)
        throws com.juzix.plt.slice.common.PltException
    {
        fileDown_async(__cb, req, null);
    }

    /**
     * 小文件上传
     * @param __cb The callback object for the operation.
     * @param userId 用户id
     * @param totalBytes 文件总字节数
     * @param fileType 文件类型
     **/
    public final void smallFileUpload_async(AMD_PltFileService_smallFileUpload __cb, String userId, String token, int totalBytes, byte[] content, String fileType)
        throws com.juzix.plt.slice.common.PltException
    {
        smallFileUpload_async(__cb, userId, token, totalBytes, content, fileType, null);
    }

    public static Ice.DispatchStatus ___smallFileUpload(PltFileService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String userId;
        String token;
        int totalBytes;
        byte[] content;
        String fileType;
        userId = __is.readString();
        token = __is.readString();
        totalBytes = __is.readInt();
        content = Ice.ByteSeqHelper.read(__is);
        fileType = __is.readString();
        __inS.endReadParams();
        _AMD_PltFileService_smallFileUpload __cb = new _AMD_PltFileService_smallFileUpload(__inS);
        try
        {
            __obj.smallFileUpload_async(__cb, userId, token, totalBytes, content, fileType, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___createUpTask(PltFileService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String userId;
        String token;
        int totalBytes;
        String fileType;
        userId = __is.readString();
        token = __is.readString();
        totalBytes = __is.readInt();
        fileType = __is.readString();
        __inS.endReadParams();
        _AMD_PltFileService_createUpTask __cb = new _AMD_PltFileService_createUpTask(__inS);
        try
        {
            __obj.createUpTask_async(__cb, userId, token, totalBytes, fileType, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___bigFileUpload(PltFileService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String fileId;
        int totalBytes;
        int startBytes;
        int endBytes;
        byte[] content;
        fileId = __is.readString();
        totalBytes = __is.readInt();
        startBytes = __is.readInt();
        endBytes = __is.readInt();
        content = Ice.ByteSeqHelper.read(__is);
        __inS.endReadParams();
        _AMD_PltFileService_bigFileUpload __cb = new _AMD_PltFileService_bigFileUpload(__inS);
        try
        {
            __obj.bigFileUpload_async(__cb, fileId, totalBytes, startBytes, endBytes, content, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___endUpTask(PltFileService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String fileId;
        PltEndType action;
        fileId = __is.readString();
        action = PltEndType.__read(__is);
        __inS.endReadParams();
        _AMD_PltFileService_endUpTask __cb = new _AMD_PltFileService_endUpTask(__inS);
        try
        {
            __obj.endUpTask_async(__cb, fileId, action, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___createDownTask(PltFileService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        String userId;
        String token;
        String fileId;
        userId = __is.readString();
        token = __is.readString();
        fileId = __is.readString();
        __inS.endReadParams();
        _AMD_PltFileService_createDownTask __cb = new _AMD_PltFileService_createDownTask(__inS);
        try
        {
            __obj.createDownTask_async(__cb, userId, token, fileId, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    public static Ice.DispatchStatus ___fileDown(PltFileService __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.startReadParams();
        PltFileDownReq req = null;
        req = PltFileDownReq.__read(__is, req);
        __inS.endReadParams();
        _AMD_PltFileService_fileDown __cb = new _AMD_PltFileService_fileDown(__inS);
        try
        {
            __obj.fileDown_async(__cb, req, __current);
        }
        catch(java.lang.Exception ex)
        {
            __cb.ice_exception(ex);
        }
        catch(java.lang.Error ex)
        {
            __cb.__error(ex);
        }
        return Ice.DispatchStatus.DispatchAsync;
    }

    private final static String[] __all =
    {
        "bigFileUpload",
        "createDownTask",
        "createUpTask",
        "endUpTask",
        "fileDown",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "smallFileUpload"
    };

    public Ice.DispatchStatus __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___bigFileUpload(this, in, __current);
            }
            case 1:
            {
                return ___createDownTask(this, in, __current);
            }
            case 2:
            {
                return ___createUpTask(this, in, __current);
            }
            case 3:
            {
                return ___endUpTask(this, in, __current);
            }
            case 4:
            {
                return ___fileDown(this, in, __current);
            }
            case 5:
            {
                return ___ice_id(this, in, __current);
            }
            case 6:
            {
                return ___ice_ids(this, in, __current);
            }
            case 7:
            {
                return ___ice_isA(this, in, __current);
            }
            case 8:
            {
                return ___ice_ping(this, in, __current);
            }
            case 9:
            {
                return ___smallFileUpload(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    protected void __writeImpl(IceInternal.BasicStream __os)
    {
        __os.startWriteSlice(ice_staticId(), -1, true);
        __os.endWriteSlice();
    }

    protected void __readImpl(IceInternal.BasicStream __is)
    {
        __is.startReadSlice();
        __is.endReadSlice();
    }

    public static final long serialVersionUID = 0L;
}
